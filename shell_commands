The filter command cut helps us extract selected characters or fields from a line of text.

1.1 Extracting characters.

The command below shows how to extract the first four characters.

```echo "database" | cut -c1-4 ```

You should get the string ```data``` as output.

The command below shows how to extract 5th to 8th characters.
```echo "database" | cut -c5-8```
You should get the string ‘base’ as output.

Non-contiguous characters can be extracted using the comma.

The command below shows how to extract the 1st and 5th characters.

```echo "database" | cut -c1,5```
You get the output : ‘db’

1.2. Extracting fields/columns

We can extract a specific column/field from a delimited text file, by mentioning

the delimiter using the -d option, or
the field number using the -f option.
The /etc/passwd is a “:” delimited file.

The command below extracts user names (the first field) from /etc/passwd.

```cut -d":" -f1 /etc/passwd```

The command below extracts multiple fields 1st, 3rd, and 6th (username, userid, and home directory) from /etc/passwd.

```cut -d":" -f1,3,6 /etc/passwd```

The command below extracts a range of fields 3rd to 6th (userid, groupid, user description and home directory) from /etc/passwd.

```cut -d":" -f3-6 /etc/passwd``` 


Exercise 2 - Transforming data using ```tr```.
tr is a filter command used to translate, squeeze, and/or delete characters.
```man tr```

2.1. Translate from one character set to another

The command below translates all lower case alphabets to upper case.

```echo "Shell Scripting" | tr "[a-z]" "[A-Z]"``` 

You could also use the pre-defined character sets also for this purpose:

echo "Shell Scripting" | tr "[:lower:]" "[:upper:]" 
The command below translates all upper case alphabets to lower case.

```echo "Shell Scripting" | tr  "[A-Z]" "[a-z]"```

2.2. Squeeze repeating occurrences of characters

The -s option replaces a sequence of a repeated characters with a single occurrence of that character.

The command below replaces repeat occurrences of ‘space’ in the output of ps command with one ‘space’.

1
ps | tr -s " "
In the above example, the space character within quotes can be replaced with the following : "[:space:]".

2.3. Delete characters

We can delete specified characters using the -d  option.

The command below deletes all digits.

```echo "My login pin is 5634" | tr -d "[:digit:]"```

The output will be : ‘My login pin is’


Exercise 3 - Start the PostgreSQL database.
On the terminal run the following command to start the PostgreSQL database.

1
```psql -U username```
Note down the access information presented towards the end of these messages, especially the CommandLine:.

A sample commandline displayed looks as given below.

`psql --username=postgres --host=localhost`

Running this command from the shell prompt will start the interactive psql client which connects to the PostgreSQL server.



Exercise 5 - Loading data into a PostgreSQL table.
In this exercise, we will create a shell script which does the following.

Extract the user name, user id, and home directory path of each user account defined in the /etc/passwd file.
Save the data into a comma separated (CSV) format.
Load the data in the csv file into a table in PostgreSQL database.
5.1. Create a shell script

Step 1: On the menu on the lab screen, use File->New File to create a new file.

Screenshot highlighting New file in File dropdown menu

Step 2: Give the name as ‘csv2db.sh’ and click ‘OK’.



Step 3: State the objective of the script using comments.

Copy and paste the following lines into the newly created file.

1
2
3
4
5
6
7
8
# This script
# Extracts data from /etc/passwd file into a CSV file.
# The csv data file contains the user name, user id and 
# home directory of each user account defined in /etc/passwd
# Transforms the text delimiter from ":" to ",".
# Loads the data from the CSV file into a table in PostgreSQL database.
Copied!
Step 4: Save the file using the File->Save menu option.

5.2. Extract required user information from /etc/passwd

In this step, we will extract user name (field 1), user id (field 3), and home directory path (field 6) from /etc/passwd file using the cut command.

The /etc/passwd has “:” symbol as the column separator.

Copy the following lines and add them to the end of the script.

1
2
3
4
5
6
7
8
# Extract phase
echo "Extracting data"
# Extract the columns 1 (user name), 2 (user id) and 
# 6 (home directory path) from /etc/passwd
cut -d":" -f1,3,6 /etc/passwd 
Copied!
Save the file.

Run the script.

1
bash csv2db.sh
Copied!
Verify that the output contains the three fields, that we extracted.

5.3. Redirect the extracted output into a file.

In this step, we will redirect the extracted data into a file named extracted-data.txt

Replace the cut command at end of the script with the following command.

1
cut -d":" -f1,3,6 /etc/passwd > extracted-data.txt
Copied!
Save the file.

Run the script.

1
bash csv2db.sh
Copied!
Run the command below to verify that the file extracted-data.txt is created, and has the content.

1
cat extracted-data.txt
Copied!
5.4. Transform the data into CSV format

The extracted columns are separated by the original “:” delimiter.

We need to convert this into a “,” delimited file.

Add the below lines at the end of the script

1
2
3
4
5
# Transform phase
echo "Transforming data"
# read the extracted data and replace the colons with commas.
tr ":" "," < extracted-data.txt
Copied!
Save the file.

Run the script.

1
bash csv2db.sh
Copied!
Verify that the output contains ‘,’ in place of “:”.

Replace the tr command at end of the script with the command below.

1
tr ":" "," < extracted-data.txt > transformed-data.csv
Copied!
Save the file.

Run the script.

1
bash csv2db.sh
Copied!
Run the command below to verify that the file transformed-data.csv is created, and has the content.

1
cat transformed-data.csv
Copied!
5.5. Load the data into the table ‘users’ in PostgreSQL

To load data from a shell script, we will use the psql client utility in a non-interactive manner.

This is done by sending the database commands through a command pipeline to psql with the help of echo command.

Step 1: Add the copy command

PostgreSQL command to copy data from a CSV file to a table is COPY.

The basic structure of the command which we will use in our script is,

1
COPY table_name FROM 'filename' DELIMITERS 'delimiter_character' FORMAT;
Copied!
Now, add the lines below to the end of the script ‘csv2db.sh’.

1
2
3
4
5
6
# Load phase
echo "Loading data"
# Send the instructions to connect to 'template1' and
# copy the file to the table 'users' through command pipeline.
echo "\c template1;\COPY users  FROM '/home/project/transformed-data.csv' DELIMITERS ',' CSV;" | psql --username=postgres --host=localhost
Copied!
Save the file.